class Solution {
    public int largestRectangleArea(int[] h) {
       int n = h.length;
       int[] left = new int[n];
       int[] right = new int[n];
       int[] ans = new int[n];
       Stack<Integer> st = new Stack<>();
       int minleft = 0;
       for(int i=0; i<n; i++){
            while(!st.isEmpty() && h[st.peek()]>=h[i]){
                st.pop();
            }
            if(st.isEmpty()) left[i] = -1;
            else{
                left[i] = st.peek();
            }
            st.push(i);
       }
       st.clear();
       for(int i=n-1; i>=0; i--){
            while(!st.isEmpty() && h[st.peek()]>=h[i]){
                st.pop();
            }
            if(st.isEmpty()) right[i] = n;
            else{
                right[i] = st.peek();
            }
            st.push(i);
       }
       int max = 0;
       for(int i=0; i<n; i++){
            int width = right[i] - left[i] -1;
            max = Math.max(width*h[i], max);
       }
       return max;
    }
}
