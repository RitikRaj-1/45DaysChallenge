class Solution {
    public int subarraySum(int[] nums, int k) {
        // HashMap<Integer, Integer> map = new HashMap<>();
        // int count = 0;
        // map.put(0, 1);
        // int sum = 0;
        // for(var i: nums){
        //     sum += i;
        //     if(map.containsKey(sum-k)){
        //         count += map.get(sum-k);
        //     }
        //     map.put(sum, map.getOrDefault(sum, 0)+1);
        // }
        // return count;

        return (fun(nums, k) - fun(nums, k-1));
    }
    private int fun(int[] nums, int goal){
        int i=0, j=0, sum=0, count=0;
        while(j<nums.length){
            sum += nums[j];
            while(sum > goal && i<=j){
                sum -= nums[i++];
            }
            count += j-i+1;
            j++;
        }
        return count;
    }
}

-> Subarrays with sums less than or equal to k include those with sums exactly equal to k and those with sums strictly less than k.
-> Subarrays with sums less than or equal to k-1 include only those with sums strictly less than k.
-> By subtracting the count of subarrays with sums less than or equal to k-1 from the count of subarrays with sums less than or equal to k, you are left with the   
   count of subarrays whose sum is exactly k.

In summary, the line (fun(nums, k) - fun(nums, k-1)) isolates the count of subarrays with a sum of exactly k by subtracting the count of subarrays with sums less than k from the count of subarrays with sums less than or equal to k.
