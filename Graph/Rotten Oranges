class Solution
{
    class Pair{
        int first;
        int second;
        Pair(int x, int y){
            this.first = x;
            this.second = y;
        }
    }
    public int orangesRotting(int[][] grid)
    {
        // Code here
        Queue<Pair> q = new LinkedList<>();
        int n = grid.length;
        int m = grid[0].length;
        int countfresh = 0;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 2){
                    q.offer(new Pair(i, j));
                }
                if(grid[i][j] != 0){
                    countfresh++;
                }
            }
        }
        
        if(countfresh == 0) return 0;
        int[] dx = {-1, 1, 0, 0};
        int[] dy = {0, 0, -1, 1};
        int count=  0, countmin = 0;
        
        while(!q.isEmpty()){
            int size = q.size();
            count += size;
            while(size-- > 0){
                Pair temp = q.poll();
                int xx = temp.first;
                int yy = temp.second;
                
                for(int i=0; i<4; i++){
                    int nx = xx + dx[i];
                    int ny = yy + dy[i];
                    
                    if(nx>=0 && ny>=0 && nx<n && ny<m && grid[nx][ny] == 1){
                        grid[nx][ny] = 2;
                        q.add(new Pair(nx, ny));
                    }
                }
            }
            if(q.size() != 0) countmin++;
        }
        return (countfresh == count) ? countmin : -1;
    }
}
