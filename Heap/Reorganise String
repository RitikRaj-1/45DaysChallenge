class Solution {
    public String reorganizeString(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for(char c: s.toCharArray()){
            map.put(c, map.getOrDefault(c, 0)+1);
        }
        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>(
            (a,b) -> b.getValue().compareTo(a.getValue()));
        pq.addAll(map.entrySet());
        
        StringBuilder sb = new StringBuilder();
        Map.Entry<Character, Integer> prev = null;
        while(!pq.isEmpty()){
            Map.Entry<Character, Integer> curr = pq.poll();
            sb.append(curr.getKey());
            curr.setValue(curr.getValue()-1);
            if(prev != null && prev.getValue()>0){
                pq.offer(prev);
            }
            prev = curr;
        }

        return (sb.length() == s.length()) ? sb.toString() : "";
    }
}
