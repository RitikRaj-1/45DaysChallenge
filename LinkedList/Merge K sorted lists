class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
            if(lists.length > 0){
            ListNode head = lists[0];
            for(int i=1; i<lists.length; i++){
                head = merge2lists(head, lists[i]);
            }
            return head;
        }
        return null;
    }
    public ListNode merge2lists(ListNode head1, ListNode head2){
        ListNode dummyhead = new ListNode(0);
        // ListNode head1 = list1;
        // ListNode head2 = list2;
        ListNode temp = dummyhead;
        // dummyhead = head1;
        while(head1 != null && head2 != null){
            if(head1.val <= head2.val){
                temp.next = head1;
                head1 = head1.next;
            }
            else {
                temp.next = head2;
                head2 = head2.next;
            }
            temp = temp.next;
        }
        temp.next = (head1 == null) ? head2 : head1;
        return dummyhead.next;
    }
}


public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0){
            return null;
        }

        if(lists.length==1){
            return lists[0];
        }
        int last = lists.length-1;
        int first = 0;
        while (last != 0) {
            int i = 0, j = last;
            while (i < j) {
                lists[i] = mergeTwoLists(lists[i], lists[j]);
                i++;
                j--;
 
                if (i >= j)
                    last = j;
            }
        }
        return lists[0];
    }
