class Solution
{
    //Function to find the smallest positive number missing from the array.
    static int missingNumber(int arr[], int size)
    {
        // Your code here
        int max = Integer.MIN_VALUE;
        Set<Integer> set = new HashSet<>();
        for(int i: arr){
            
            if(i>0){ 
                max = Math.max(i, max);
                set.add(i);
            }
        }
        for(int i=1; i<=max; i++){
            if(!set.contains(i)){
                return i;
            }
        }
        return (max<0) ? 1 : max+1;
    }
}

--------------------------------------------------------------------------------------------------------------------------
//Optimised
class Solution {
    static int missingNumber(int arr[], int size) {
        // First pass: Place each number in its correct position if possible
        for (int i = 0; i < size; i++) {
            while (arr[i] > 0 && arr[i] <= size && arr[arr[i] - 1] != arr[i]) {
                // Swap arr[i] with the element at its target position arr[arr[i] - 1]
                int temp = arr[arr[i] - 1];
                arr[arr[i] - 1] = arr[i];
                arr[i] = temp;
            }
        }

        // Second pass: Find the first index where the number is not correct
        for (int i = 0; i < size; i++) {
            if (arr[i] != i + 1) {
                return i + 1; // The first missing positive number
            }
        }

        // If all numbers are in place, the missing number is size + 1
        return size + 1;
    }
}

