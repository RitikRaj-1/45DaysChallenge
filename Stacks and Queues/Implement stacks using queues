class MyStack {

    Queue<Integer> q1;
    Queue<Integer> q2;
    
    public MyStack() {
        this.q1 = new LinkedList<>();
        this.q2 = new LinkedList<>();
    }
    
    public void push(int x) {
        q1.add(x);
    }
    
    public int pop() {
        if(!q1.isEmpty()){
            int top = 0;
            while(!q1.isEmpty()){
                top = q1.remove();
                if(q1.isEmpty()) break;
                q2.add(top);
            }
            if(!q2.isEmpty())
            {while(!q2.isEmpty()){
                q1.add(q2.remove());
            }}
            return top;
        }
        else return -1;
    }
    
    public int top() {
         if(!q1.isEmpty()){
             int top = 0;
            while(!q1.isEmpty()){
                top = q1.remove();
                q2.add(top);
            }
            if(!q2.isEmpty())
            {while(!q2.isEmpty()){
                q1.add(q2.remove());
            }}
            return top;
        }
        else return -1;
    }
    
    public boolean empty() {
        if(q1.isEmpty()) return true;
        return false;
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
