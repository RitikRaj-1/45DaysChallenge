class Solution {
    public int sumSubarrayMins(int[] arr) {
        int n = arr.length;
        int[] leftsmallest = new int[n];
        int[] rightsmallest = new int[n]; 

        int M = (int)(Math.pow(10,9) + 7);

        leftsmallest = lsr(arr , n);
        rightsmallest = rsr(arr, n);
        long sum = 0;

        for(int i = 0; i<n; i++){
            long ls = leftsmallest[i] - i;
            long rs = i - rightsmallest[i];

            sum += ls*rs*arr[i];
        }
        return (int)(sum % M);

    }

    private int[] lsr(int[] arr, int n){
        Stack<Integer> stack = new Stack<>();
        int[] result = new int[n];

        for(int i = 0; i<n; i++){
            
            if(stack.isEmpty()){
                result[i] = -1;
            }
            else{
                while(!stack.empty() && arr[stack.peek()] >= arr[i]){
                    stack.pop();
                }
                result[i] = stack.isEmpty() ? -1 : stack.peek();
            }
            stack.push(i);
        }
        return result;
    }

    private int[] rsr(int[] arr, int n){
        Stack<Integer> stack = new Stack<>();
        int[] result = new int[n];

        for(int i = n-1; i>=0; i--){
            
            if(stack.isEmpty()){
                result[i] = n;
            }
            else{
                while(!stack.empty() && arr[stack.peek()] > arr[i]){
                    stack.pop();
                }
                result[i] = stack.isEmpty() ? n : stack.peek();
            }
            stack.push(i);
        }
        return result;
    }
}
