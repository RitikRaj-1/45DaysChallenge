class Solution {
    public int calculate(String s) {
        s = s.replaceAll("\\s", "");
        Stack<Integer> stack = new Stack<>();
        int num = 0;
        char sign = '+';
        
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            
            if (Character.isDigit(c)) {
                num = num * 10 + (c - '0');
            }
            
            if (!Character.isDigit(c) || i == s.length() - 1) {
                if (sign == '+') {
                    stack.push(num);
                } else if (sign == '-') {
                    stack.push(-num);
                } else if (sign == '*') {
                    stack.push(stack.pop() * num);
                } else if (sign == '/') {
                    stack.push(stack.pop() / num);
                }
                sign = c;
                num = 0;
            }
        }
        
        int result = 0;
        for (int val : stack) {
            result += val;
        }
        
        return result;



    //     s = s.replaceAll("\\s", "");
    //     for (int i = 0; i < s.length(); i++) {
    //         if (s.charAt(i) == '/') {
    //             int val = calc(Character.getNumericValue(s.charAt(i - 1)), Character.getNumericValue(s.charAt(i + 1)),
    //                     '/');
    //             String str = String.valueOf(val);
    //             if (s.length() > 3) {
    //                 if (i < s.length() - 2)
    //                     s = s.substring(0, i - 1) + str + s.substring(i + 2, s.length());
    //                 else
    //                     s = s.substring(0, i - 1) + str;
    //             } else {
    //                 s = str;
    //                 break;
    //             }
    //         }
    //     }
    //     for (int i = 0; i < s.length(); i++) {
    //         if (s.charAt(i) == '*') {
    //             int val = calc(Character.getNumericValue(s.charAt(i - 1)), Character.getNumericValue(s.charAt(i + 1)),
    //                     '*');
    //             String str = String.valueOf(val);
    //             if (s.length() > 3) {
    //                 if (i < s.length() - 2)
    //                     s = s.substring(0, i - 1) + str + s.substring(i + 2, s.length());
    //                 else
    //                     s = s.substring(0, i - 1) + str;
    //             } else {
    //                 s = str;
    //                 break;
    //             }
    //         }
    //     }
    //     for (int i = 0; i < s.length(); i++) {
    //         if (s.charAt(i) == '+') {
    //             int val = calc(Character.getNumericValue(s.charAt(i - 1)), Character.getNumericValue(s.charAt(i + 1)),
    //                     '+');
    //             String str = String.valueOf(val);
    //             if (s.length() > 3) {
    //                 if (i < s.length() - 2)
    //                     s = s.substring(0, i - 1) + str + s.substring(i + 2, s.length());
    //                 else
    //                     s = s.substring(0, i - 1) + str;
    //             } else {
    //                 s = str;
    //                 break;
    //             }
    //         }
    //     }
    //     for (int i = 0; i < s.length(); i++) {
    //         if (s.charAt(i) == '-') {
    //             int val = calc(Character.getNumericValue(s.charAt(i - 1)), Character.getNumericValue(s.charAt(i + 1)),
    //                     '-');
    //             String str = String.valueOf(val);
    //             if (s.length() > 3) {
    //                 if (i < s.length() - 2)
    //                     s = s.substring(0, i - 1) + str + s.substring(i + 2, s.length());
    //                 else
    //                     s = s.substring(0, i - 1) + str;
    //             } else {
    //                 s = str;
    //                 break;
    //             }
    //         }
    //     }
    //     return Integer.parseInt(s);
    // }

    // public int calc(int i, int j, char c) {
    //     if (c == '+')
    //         return i + j;
    //     else if (c == '*')
    //         return i * j;
    //     else if (c == '/')
    //         return (int) (Math.floor(i / j));
    //     else if (c == '-')
    //         return i - j;
    //     return 0;
    }
}
