class Solution {
    Map<TreeNode, TreeNode> parentMap = new HashMap<>();
    
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> res = new ArrayList<>();
        buildParentMap(root, null); // Step 1: Build parent pointers
        findNodesAtDistanceK(target, null, k, res); // Step 2: Find nodes at distance k
        return res;
    }
    
    // Step 1: Build the parent map to keep track of parent pointers
    private void buildParentMap(TreeNode node, TreeNode parent) {
        if (node == null) return;
        parentMap.put(node, parent);
        buildParentMap(node.left, node);
        buildParentMap(node.right, node);
    }
    
    // Step 2: Find nodes at distance k
    private void findNodesAtDistanceK(TreeNode node, TreeNode from, int k, List<Integer> res) {
        if (node == null) return;
        if (k == 0) {
            res.add(node.val);
            return;
        }
        if (node.left != from) findNodesAtDistanceK(node.left, node, k - 1, res);
        if (node.right != from) findNodesAtDistanceK(node.right, node, k - 1, res);
        TreeNode parent = parentMap.get(node);
        if (parent != from) findNodesAtDistanceK(parent, node, k - 1, res);
    }
}
